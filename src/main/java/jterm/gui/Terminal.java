package jterm.gui;

import jterm.io.input.InputHandler;
import jterm.io.input.Keys;
import jterm.io.output.TextColor;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;


public class Terminal extends JFrame implements KeyListener {

    private JPanel contentPane;
    private JTextPane textPane;


    public Terminal() {
        TextColor.initGui();
        // JTerm.IS_WIN = false;
        // JTerm.IS_UNIX = true;

        setContentPane(contentPane);
        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });
        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        textPane.setBackground(new Color(28, 28, 28));
        textPane.setEditable(true);
        textPane.addKeyListener(this);
    }

    @Override
    public void keyPressed(KeyEvent e) {
        //Consume under certain conditions
        switch (e.getKeyCode()) {
            //These keys need to be handled by InputHandler only
            case KeyEvent.VK_TAB:
            case KeyEvent.VK_UP:
            case KeyEvent.VK_DOWN:
                e.consume();
                break;
            //Consume without processing shift and capslock keys
            //These keys are modifiers. We can ignore them
            case KeyEvent.VK_SHIFT:
            case KeyEvent.VK_CAPS_LOCK:
                e.consume();
                return;
        }
        if ((int) e.getKeyChar() == 65535) {
            //An arrow key was pressed. Switch the key code into the negatives so it wont interfere with any real chars
            new Thread(() -> InputHandler.process(Keys.getKeyByValue(String.valueOf(e.getKeyCode() * -1)), String.valueOf(e.getKeyCode()))).start();
        } else
            new Thread(() -> InputHandler.process(Keys.getKeyByValue(String.valueOf(e.getKeyCode())), String.valueOf((int) e.getKeyChar()))).start();
    }

    private void onCancel() {
        dispose();
        System.exit(0);
    }

    public JTextPane getTextPane() {
        return textPane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textPane = new JTextPane();
        scrollPane1.setViewportView(textPane);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }
}
